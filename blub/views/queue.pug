extends layout

block content
    head
        link(rel='stylesheet', href='/stylesheets/spinner.css')

    script.

        var hasClassCode;

        var mlink = ""
        
        const nth = function(d) {
            if (d > 3 && d < 21) return 'th';
            switch (d % 10) {
                case 1:  return "st";
                case 2:  return "nd";
                case 3:  return "rd";
                default: return "th";
            }
        };
        
        //We would like to thank our heavenly father above, StackOverflow, for writing the following 2 formatting functions for me
        function hours12(date){return (date.getHours() + 24) % 12 || 12;}

        function pad(value){
            if(value < 10) {
                return '0' + value;
            } else {
                return value;
            }
        }

        function formatdate(dobj) {
            var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            var ampm = (dobj.getHours() > 11) ? "PM" : "AM";

            var dstr = "" +
                days[dobj.getDay()] + ", " +
                months[dobj.getMonth()] + " " +
                dobj.getDate() + nth(dobj.getDate()) + " at " +
                hours12(dobj) + ":" +
                pad(dobj.getMinutes()) + " " +
                ampm;
                
            return dstr;
        };
        
        function getCookie(cname) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for(var i = 0; i <ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        //const WebSocket = require('ws')
        const url = 'ws://localhost:8080'
        const connection = new WebSocket(url)
         
        connection.onopen = () => {
            connection.send(JSON.stringify( {'request': 'init' } )); 
        }
         
        connection.onerror = (error) => {
            console.log(`WebSocket error: ${error}`)
        }

        connection.onmessage = (e) => {
            console.log(e.data)
            var msg = JSON.parse(e.data);
            
            // Handle a request
            switch(msg["status"]) {
                case "in-session": {
                    mlink = msg['link'] + getCookie('passhash');
                    document.getElementById('header').innerHTML = "You're connected to a machine: " + msg["machine"]["name"] + ".";
                    document.getElementById('subheader').innerHTML = "You can use this workstation until your session expires on <b>" + 
                                                                      formatdate(new Date(msg["machine"]["until"])) + "</b>.";
                    toggleHidden('remote', 'end');
                }
                break;

                case "in-session-class": {
                    mlink = msg['link'] + getCookie('passhash');
                    document.getElementById('header').innerHTML = "You're connected to a machine: " + msg["machine"]["name"] + ".";
                    document.getElementById('subheader').innerHTML = "You can use this workstation until your class ends on <b>" + 
                                                                      formatdate(new Date(msg["machine"]["until"])) + "</b>.";
                    toggleHidden('remote', 'end');
                }
                break;
                
                case "invalid-class": {
                    document.getElementById('header').innerHTML = "You're not waiting for a machine.";
                    document.getElementById('subheader').innerHTML = "The current wait time is about <b>20 minutes</b>.";
                    toggleHidden('join', 'close', 'code');
                    document.getElementById('err').innerHTML = "Invalid code. Make sure that the code is correct and you're not too early to join this class.";
                    hasClassCode = true;
                }
                break;
                
                case "full-class": {
                    document.getElementById('header').innerHTML = "You're not waiting for a machine.";
                    document.getElementById('subheader').innerHTML = "The current wait time is about <b>20 minutes</b>.";
                    toggleHidden('join', 'close', 'code');
                    document.getElementById('err').innerHTML = "The class you are trying to join is already full.";
                    hasClassCode = true;
                }
                break;

                case "queued": {
                    if(msg['place'] == 0) {
                        document.getElementById('header').innerHTML = "You're next up for a machine.";
                        document.getElementById('subheader').innerHTML = "The <b>next open machine</b> will be yours.";
                    }
                    else {
                        var placemat = Number(Number(msg['place'])+Number(1));
                        document.getElementById('header').innerHTML = 'You are ' + placemat + nth(placemat) + ' in the queue.';
                        document.getElementById('subheader').innerHTML = "It'll be about <b>20 minutes</b> before you're called.";
                    }
                    toggleHidden('leave', 'loader');
                }
                break;
                
                case "idle": {
                    document.getElementById('header').innerHTML = "You're not waiting for a machine.";
                    document.getElementById('subheader').innerHTML = "The current wait time is about <b>20 minutes</b>.";
                    if (hasClassCode){
                        toggleHidden('join', 'close', 'code');
                    }else{
                        toggleHidden('join', 'class');
                    }
                }
                break;
            }
        }

        // Button handlers
        function join_handler(){
            if (!hasClassCode){
                //No class code, regular queue
                connection.send(JSON.stringify( { 'request': 'queue-join' } ));
            }else{
                //Class code
                connection.send(JSON.stringify( { 'request': 'queue-join-class', 'reservation': document.getElementById('code').value.trim() } ));
            }
        }

        function leave_handler(){
            connection.send(JSON.stringify( { 'request': 'queue-leave' } ));
        }

        function end_handler(){
            connection.send(JSON.stringify( { 'request': 'session-end' } ));
        }
        
        function remote_handler() {
            // Launch Myrtille
            if(mlink != "")
                window.open(mlink);
        }

        function class_handler(){
            document.getElementById('class').classList.add("hidden");
            document.getElementById('code').classList.remove("hidden");
            document.getElementById('close').classList.remove("hidden");
            hasClassCode = true;
            document.getElementById('join').innerHTML = "Join class";
            document.getElementById('err').innerHTML = "";
        }

        function close_handler(){
            document.getElementById('class').classList.remove("hidden");
            document.getElementById('code').classList.add("hidden");
            document.getElementById('close').classList.add("hidden");
            hasClassCode = false;
            document.getElementById('join').innerHTML = "Join the queue";
            document.getElementById('err').innerHTML = "";
        }

        function codeEntered(){ //not in use atm
            //hasClassCode = (document.getElementById('code').value.trim() === '') ? false : true;
            //document.getElementById('join').innerHTML = (hasClassCode) ? "Join class" : "Join the queue";
        }
        
        function toggleHidden(...args){
            document.getElementById('err').innerHTML = "";              //Error text is cleared on state transition
            document.getElementById('join').classList.add("hidden");
            document.getElementById('remote').classList.add("hidden");
            document.getElementById('end').classList.add("hidden");
            document.getElementById('leave').classList.add("hidden");
            document.getElementById('class').classList.add("hidden");
            document.getElementById('code').classList.add("hidden");
            document.getElementById('close').classList.add("hidden");
            document.getElementById('loader').classList.add("hidden");  //Spinner
            args.forEach(element => document.getElementById(element).classList.remove("hidden"));
        }
        
    div(id='holder')
        div.loaderBox(id='loader')
            div.loader    
        h1(id='header') You are 11th in the queue.

        
    p(id='subheader')
        | The current wait time is about 
        b(id='time-remaining') 20 minutes.
    br
    button(id='remote' onclick='remote_handler()') 
        b() Open your remote session
    input(id='code' name='code' autocomplete="off" oninput="codeEntered()" placeholder='Enter class code')
    button(id='leave' onclick='leave_handler()') Leave the queue
    button(id='join' onclick='join_handler()') Join the queue
    button(id='end' onclick='end_handler()') End your session
    button(id='class' class="textOnly" onclick='class_handler()') I have a class code...
    button(id='close' class="textOnly" onclick='close_handler()') I don't have a class code...

    p(id='err')