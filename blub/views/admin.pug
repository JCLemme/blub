extends layout

block content
    head
        link(rel='stylesheet', href='/stylesheets/admin.css')
   
    script.
        const connection = new WebSocket('#{admin_server}')
         
        //StackOverflow is god
        function clearTable(table){
            var rows = table.rows;
            var i = rows.length;
            while (--i) {
                rows[i].parentNode.removeChild(rows[i]);
            }
        }

        function display_machines(minfo){
            tbl = document.getElementById('machineTable');
            clearTable(tbl);
            
            //TODO: This should really be a template instead of manually creating all these objs
            for(var i=0;i<minfo.length;i++){
                var row = document.createElement("tr");

                //Machine Name
                var machineCell = document.createElement("td");
                machineCell.innerHTML = "<b>" + minfo[i]['name'].toUpperCase() + "</b>";
                machineCell.id = (i + '-name');
                row.appendChild(machineCell);

                //IP Address
                var ipCell = document.createElement("td");
                ipCell.innerHTML = (minfo[i]['ip']);
                row.appendChild(ipCell);

                //Session Info
                var use;
                use = (minfo[i]['user'] != "") ? ('in use by ' + minfo[i]['user'] + ' until ' + new Date(minfo[i]['until']) + ' ') : 'not in use ';
                var useCell = document.createElement("td");
                useCell.style.width = "300px"; 
                useCell.innerHTML = use;
                useCell.id = (i + '-use');
                row.appendChild(useCell);

                //Reservation Info
                res = "<i>(none)</i>"
                if(minfo[i]['reservation'] != "") {
                    res = 'reserved for ' + minfo[i]['reservation'];
                }
                var resCell = document.createElement("td");
                resCell.innerHTML = res;
                resCell.id = (i + '-res');
                row.appendChild(resCell);

                //Change Code
                var changeCell = document.createElement("td");
                var box = document.createElement("div");
                var changeField = document.createElement("input");
                var changeButton = document.createElement("button");
                changeButton.innerHTML = "Change";
                changeField.placeholder = "Enter new code";
                changeField.classList.add("admin");
                changeButton.classList.add("admin");
                box.appendChild(changeField);
                box.appendChild(changeButton);
                changeCell.appendChild(box);
                changeField.id = (i + '-codeField');
                changeButton.id = (i + '-codeChange');
                row.appendChild(changeCell);

                //Actions
                var actCell = document.createElement("td");
                var box = document.createElement("div");
                var termButton = document.createElement("button");
                termButton.innerHTML = "Terminate";
                termButton.classList.add("admin");
                box.appendChild(termButton);
                actCell.appendChild(box);
                termButton.id = (i + '-terminate');
                row.appendChild(actCell);

                tbl.appendChild(row);
            }
        }
        
        function display_queues(qinfo) {
            var qstr = "";
           
            if(qinfo.length == 0) {
                qstr = '<p><i>Queue is empty...</i></p>';
            }
            
            for(var i=0;i<qinfo.length;i++) {
                qstr += '<p><b>' + Number(1+i) + ':</b> ';
                console.log(qinfo[i]);
                qstr += qinfo[i]['user'] + ' (since ' + new Date(qinfo[i]['date']) + ')</p>';
            }
            
            document.getElementById('queueinfo').innerHTML = qstr;
        }
        
        connection.onopen = () => {
            connection.send(JSON.stringify( {'request': 'init-admin' } ));
            connection.send(JSON.stringify( {'request': 'queue' } )); 
            connection.send(JSON.stringify( {'request': 'machines' } )); 
        }
         
        connection.onerror = (error) => {
            console.log(`WebSocket error: ${error}`)
        }
         
        connection.onmessage = (e) => {
            console.log(e.data)
            var msg = JSON.parse(e.data);
            
            // Handle a request
            switch(msg['status']) {
                case 'machine-info': {
                    display_machines(msg['data']);
                }
                break;

                case 'queue-info': {
                    display_queues(msg['data']);
                }
                break;                
            }
        }
        
        function button_handler() {
            connection.send(JSON.stringify( {'request': 'queue' } )); 
            connection.send(JSON.stringify( {'request': 'machines' } )); 
        }
        
    h1 Here's your Blub status report.
    button(id='action' onclick='button_handler()') Refresh
    br
    br
    div(style="display:flex;")
        div(style="width:20%;")
            h3 Here is the current queue.
            div(id='queueinfo')
        
        div()
            h3 Here are the machines in the pool.
            table(id="machineTable")
                tr
                    th Machine
                    th IP Address
                    th Current Session
                    th Reservation Code
                    th Change Code
                    th Actions
                tr
                    td test!
                    td test!
                    td test!
                    td test!
            
