extends layout

block content
    head
        link(rel='stylesheet', href='/stylesheets/moderator.css')
   
    script.
        const connection = new WebSocket('#{protocol}#{server}#{endpoint}')
         
        //StackOverflow is god
        function clearTable(table){
            var rows = table.rows;
            var i = rows.length;
            while (--i) {
                rows[i].parentNode.removeChild(rows[i]);
            }
        }

        //THIS WILL BE REFACTORED INTO DISPLAY_CLASSES
        function display_machines(minfo){
            tbl = document.getElementById('machineTable');
            clearTable(tbl);
            
            //TODO: This should still be a template, not manual objs
            for(var i=0;i<minfo.length;i++){
                var row = document.createElement("tr");

                //Machine Name
                var machineCell = document.createElement("td");
                machineCell.innerHTML = "<b>" + minfo[i]['name'].toUpperCase() + "</b>";
                machineCell.id = (i + '-name');
                row.appendChild(machineCell);

                //IP Address
                var ipCell = document.createElement("td");
                ipCell.innerHTML = (minfo[i]['ip']);
                row.appendChild(ipCell);

                //Session Info
                var use;
                use = (minfo[i]['user'] != "") ? ('in use by ' + minfo[i]['user'] + ' until ' + new Date(minfo[i]['until']) + ' ') + ((minfo[i]['on_terminate'] == "") ? ' - terminating' : ' - open'): 'not in use ';
                var useCell = document.createElement("td");
                useCell.style.width = "300px"; 
                useCell.innerHTML = use;
                useCell.id = (i + '-use');
                row.appendChild(useCell);

                //Reservation Info
                res = "<i>(none)</i>"
                if(minfo[i]['reservation'] != "") {
                    res = minfo[i]['reservation'];
                }
                var resCell = document.createElement("td");
                resCell.innerHTML = res;
                resCell.id = (i + '-res');
                row.appendChild(resCell);

                //Change Code
                var changeCell = document.createElement("td");
                var box = document.createElement("div");
                var changeField = document.createElement("input");
                var changeButton = document.createElement("button");
                changeButton.innerHTML = "Change";
                changeField.placeholder = "Enter new code";
                changeField.classList.add("admin");
                changeButton.classList.add("admin");
                box.appendChild(changeField);
                box.appendChild(changeButton);
                changeCell.appendChild(box);
                changeField.id = (i + '-codeField');
                changeButton.id = (i + '-codeChange');
                changeButton.onclick = changeCode(i);
                row.appendChild(changeCell);
                

                //Actions
                var actCell = document.createElement("td");
                var box = document.createElement("div");
                var termButton = document.createElement("button");
                termButton.innerHTML = (minfo[i]['user'] == "") ? 'No actions' : (minfo[i]['on_terminate'] == "") ? 'Kill' : 'Terminate';
                if(minfo[i]['user'] == "") { termButton.disabled = true; }
                termButton.classList.add("admin");
                box.appendChild(termButton);
                actCell.appendChild(box);
                termButton.id = (i + '-terminate');
                termButton.onclick = terminate(minfo[i]);
                row.appendChild(actCell);

                tbl.appendChild(row);
            }
        }
        
        function display_queues(qinfo) {
            var qstr = "";
           
            if(qinfo.length == 0) {
                qstr = '<p><i>Queue is empty...</i></p>';
            }
            
            for(var i=0;i<qinfo.length;i++) {
                qstr += '<p><b>' + Number(1+i) + ':</b> ';
                console.log(qinfo[i]);
                qstr += qinfo[i]['user'] + ' (since ' + new Date(qinfo[i]['date']) + ')</p>';
            }
            
            document.getElementById('queueinfo').innerHTML = qstr;
        }

        function display_times(tinfo){
            document.getElementById('sess').innerHTML = qstr['term'];
            document.getElementById('sess').innerHTML = qstr['kill'];
        }
        
        connection.onopen = () => {
            //TODO: Adjust
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'init' } ));
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'queue' } )); 
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'machines' } ));
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'times' } ));
        }
         
        connection.onerror = (error) => {
            console.log(`WebSocket error: ${error}`)
        }
         
        connection.onmessage = (e) => {
            console.log(e.data)
            var msg = JSON.parse(e.data);
            
            // Handle a request
            if(msg['endpoint'] == 'admin') {
                switch(msg['status']) {
                    case 'machine-info': {
                        display_machines(msg['data']);
                    }
                    break;

                    case 'queue-info': {
                        display_queues(msg['data']);
                    }
                    break;  

                    case 'times-info': {
                        display_times(msg['data']);
                    }
                    break;               
                }
            }
        }
        
        function button_handler() {
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'queue' } )); 
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'machines' } ));
            connection.send(JSON.stringify( {'endpoint': 'moderator', 'request': 'times' } ));
        }
        
        function changeCode(machine){
            //Oh god I'm so sorry
            return function(){
                console.log("changing machine " + machine + " to use code " + document.getElementById(machine + '-codeField').value.toUpperCase());
                connection.send(JSON.stringify( {'endpoint': 'admin', 'endpoint': 'admin', 'request': 'reserve' , 'machine': machine, 'code': document.getElementById(machine + '-codeField').value.toUpperCase() } )); 
                document.getElementById(machine + '-codeField').value = '';
            }
        }

        function terminate(machine){
            //It has to be this way
            return function(){
                if (machine["user"]){
                    console.log("terminating machine " + machine['name']);
                    connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'terminate' , 'user': machine["user"] } ));
                }
            }
        }

        confirm = false;

        function check_handler(){
            document.getElementById("termAllCheck").innerHTML = (document.getElementById("termAllCheck").innerHTML == " ") ? "âœ”" : " ";
            confirm = !confirm;
        }

        function termAll_handler(){
            if (confirm){
                //terminates ALL machines
                connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'terminate-all' } ));
                //Reset confirmation
                confirm = false;
                document.getElementById("termAllCheck").innerHTML = " ";
            }
        }

        function termCode_handler(){
            //terminates all machines with given code
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'terminate-code' , 'code': document.getElementById('termCodeInput').value.toUpperCase() } ));
        }

        function addCode_handler(){
            //Adds code to all machines
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'change-code-all' , 'code': document.getElementById('addCodeInput').value.toUpperCase() } ));
        }

        function removeCode_handler(){
            //Removes code from all machines
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'remove-code' , 'code': document.getElementById('rmvCodeInput').value.toUpperCase() } ));
        }

        function removeAll_handler(){
            //Removes all codes from all machines
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'change-code-all' } ));
        }

        function sess_handler(){
            //Removes all codes from all machines
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'change-length', 'num': document.getElementById('sessInput').value } ));
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'times' } ));
        }

        function grace_handler(){
            //Removes all codes from all machines
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'change-grace', 'num': document.getElementById('graceInput').value } ));
            connection.send(JSON.stringify( {'endpoint': 'admin', 'request': 'times' } ));
        }

    //---------------------------//
    //THE ACTUAL PAGE BEGINS HERE//
    //---------------------------//
    
    h1 Register and manage classes here.
    //TODO: Hide/show this div if a class is currently open
    div(class="classBox hidden")
        div()
            h2 Your class is in session!
        p [CLASSNAMEHERE] is currently open to students, and will end at [TIMEHERE].
    br
    
    h3 Register a class.

    div()
        table(id="registerTable")
            tr
                th Class Name
                th Class Code
                th Date
                th Start Time
                th End Time
                th Computers to Book
            tr
                td
                    input(class="cPanel" id='nameInput' autocomplete="off" name='code' placeholder='Ex. "URI 101 class 1"' type='text')
                td
                    input(class="cPanel" id='codeInput' autocomplete="off" name='code' placeholder='Ex. "URI101-C1"' type='text')
                td
                    input(class="cPanel" id='dateInput' autocomplete="off" name='code' value='2000-01-01' type='date')
                td
                    input(class="cPanel" id='startInput' autocomplete="off" name='code' value='11:00' type='time')
                td
                    input(class="cPanel" id='endInput' autocomplete="off" name='code' value='12:15' type='time')
                td
                    input(class="cPanel" id='machineInput' autocomplete="off" name='code' placeholder='Enter number' type='number')
        br
        p Note: the Class Code is what students will enter to join your class. A good code should be short and unique.
        button(class="cPanel" id='registerButton' onclick='sess_handler()') Register Class
        br
        br
        br
        br  
    
    //If there are no classes registered, classList is hidden and noClass is shown.
    div(id="classList")
        h3 Here are the classes you've registered.
        table(id="classTable")
            tr
                th Name
                th Class Code
                th Date
                th Time
                th Machines
                //th Repeat
                th Actions
            tr
                td [Class Name]
                td [code]
                td 2000-01-01
                td 99:99 AM - 99:99 PM
                td 10
                //td M/W/F

    div(id="noClass")
        h3 You haven't registered any classes yet.

    //Not needed on this page, here just in case...
    //button(id='action' onclick='button_handler()') Refresh page